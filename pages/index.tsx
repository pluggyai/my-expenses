import Head from 'next/head'
import styles from '../styles/Home.module.css'
import { useEffect, useState } from 'react';
import type { PluggyConnect as PluggyConnectType } from 'react-pluggy-connect'
import dynamic from 'next/dynamic';

const PluggyConnect = dynamic(
  () => (import('react-pluggy-connect') as any).then((mod: { PluggyConnect: any; }) => mod.PluggyConnect),
  { ssr: false }
) as typeof PluggyConnectType

export default function Home() {

  const [connectToken, setConnectToken] = useState<string>('')
  const [isWidgetOpen, setIsWidgetOpen] = useState<boolean>(false)
  const [categoryBalances, setCategoryBalances] = useState<{category: string, balance: number}[] | null>(null)

  useEffect(() => {
    if (!connectToken) {
      const fetchToken = async () => {
        const response = await fetch('/api/connect-token')
        const { accessToken } = await response.json()
        setConnectToken(accessToken)
      }

      fetchToken()
    }
  })

  const onSuccess = async (itemData: { item: any; }) => {
    const response = await fetch('/api/transactions?itemId=' + itemData.item.id)
    const categoryBalances = await response.json()
    setIsWidgetOpen(false)
    setCategoryBalances(categoryBalances)
  }

  const onError = (error: any) => {
    console.log('There was an error: ', error)
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Pluggy My Expenses</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        {
          !categoryBalances ? 
          (
            <div className={styles.grid}>
              <h1 className={styles.title}>
                Welcome to Pluggy My Expenses!
              </h1>
              {isWidgetOpen ? (
                <PluggyConnect
                  connectToken={connectToken}
                  includeSandbox={true}
                  onSuccess={onSuccess}
                  onError={onError}
                />
              ) : (
                <button
                  className={styles.card}
                  disabled={!connectToken}
                  onClick={() => setIsWidgetOpen(true)}
                >
                  <h3>Connect your account</h3>
                </button>
              )}
            </div>
          ) : 
          (
            <div>
              <table>
                <thead><th>Category</th><th>Spent</th></thead>
                <tbody>
                  {
                    categoryBalances.map(categoryBalance => (
                      <tr key={categoryBalance.category}>
                        <td>{categoryBalance.category}</td>
                        <td>$ {categoryBalance.balance}</td>
                      </tr>
                    ))
                  }
                 
                </tbody>
              </table>
            </div>
            )        
        }
      </main>

      
    </div>
  )
}
